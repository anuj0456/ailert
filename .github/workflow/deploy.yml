name: Deploy to EC2

on:
  pull_request:
    types: [closed]
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  DOCKER_IMAGE_TAG: ${{ github.sha }}
  S3_CONFIG_BUCKET: ${{ secrets.S3_CONFIG_BUCKET }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Vault Files from S3
        run: |
          mkdir -p db_handler/vault
          aws s3 sync s3://${{ env.S3_CONFIG_BUCKET }}/vault/ db_handler/vault/

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create SSH Directory
        run: mkdir -p ~/.ssh

      - name: Store SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem

      - name: Add EC2 to Known Hosts
        run: |
          ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create Deploy Script
        run: |
          echo '#!/bin/bash
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}
          docker stop ailert-newsletter || true
          docker rm ailert-newsletter || true
          
          # Create vault directory if it doesn't exist
          mkdir -p /data/newsletter/vault
          
          # Sync latest vault files from S3
          aws s3 sync s3://${{ env.S3_CONFIG_BUCKET }}/vault/ /data/newsletter/vault/
          
          docker run -d \
            --name ailert-newsletter \
            -p 5000:5000 \
            -v /data/newsletter/vault:/app/db_handler/vault \
            --restart unless-stopped \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_REGION="${{ env.AWS_REGION }}" \
            -e SMTP_USERNAME="${{ secrets.SMTP_USERNAME }}" \
            -e SMTP_PASSWORD="${{ secrets.SMTP_PASSWORD }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}
          docker system prune -f' > deploy.sh
          chmod +x deploy.sh

      - name: Deploy to EC2
        run: |
          scp -i ~/.ssh/ec2_key.pem deploy.sh ec2-user@${{ env.EC2_HOST }}:~/deploy.sh
          ssh -i ~/.ssh/ec2_key.pem ec2-user@${{ env.EC2_HOST }} "./deploy.sh"

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/ec2_key.pem
          rm -f deploy.sh